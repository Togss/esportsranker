# Generated by Django 5.2.7 on 2025-10-15 17:28

import django.db.models.constraints
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('heroes', '__first__'),
        ('players', '0001_initial'),
        ('teams', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('order', models.PositiveIntegerField(help_text='Order of the stage in the tournament')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
            options={
                'verbose_name': 'Stage',
                'verbose_name_plural': 'Stages',
                'ordering': ['tournament', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('best_of', models.PositiveIntegerField(choices=[(1, 'Bo1'), (3, 'Bo3'), (5, 'Bo5'), (7, 'Bo7')], default=3)),
                ('scheduled_date', models.DateTimeField(db_index=True)),
                ('score', models.CharField(blank=True, help_text="Score in format 'Team1Score-Team2Score', e.g., '2-1'", max_length=20)),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='series_as_team1', to='teams.team')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='series_as_team2', to='teams.team')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='series_won', to='teams.team')),
                ('stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='series', to='competitions.stage')),
            ],
            options={
                'verbose_name': 'Series',
                'verbose_name_plural': 'Series',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game_no', models.PositiveIntegerField(help_text='Game number in the series, e.g., 1 for Game 1')),
                ('duration', models.DurationField(help_text='Duration of the game')),
                ('vod_link', models.URLField(blank=True, help_text='Link to the VOD of the game')),
                ('blue_side', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_as_blue_side', to='teams.team')),
                ('red_side', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_as_red_side', to='teams.team')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_won', to='teams.team')),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='competitions.series')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
                'ordering': ['series', 'game_no'],
            },
        ),
        migrations.CreateModel(
            name='TeamGameStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('side', models.CharField(choices=[('BLUE', 'Blue Side'), ('RED', 'Red Side')], db_index=True, max_length=5)),
                ('k', models.PositiveIntegerField(default=0, help_text='Kills')),
                ('d', models.PositiveIntegerField(default=0, help_text='Deaths')),
                ('a', models.PositiveIntegerField(default=0, help_text='Assists')),
                ('gold', models.PositiveIntegerField(default=0, help_text='Total Gold Earned')),
                ('turret_kills', models.PositiveIntegerField(default=0)),
                ('lord_kills', models.PositiveIntegerField(default=0)),
                ('turtle_kills', models.PositiveIntegerField(default=0)),
                ('first_blood', models.BooleanField(default=False)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_stats', to='competitions.game')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to='teams.team')),
            ],
            options={
                'verbose_name': 'Team Game Stat',
                'verbose_name_plural': 'Team Game Stats',
                'ordering': ['game', 'team'],
            },
        ),
        migrations.CreateModel(
            name='PlayerGameStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('GOLD', 'Gold Lane'), ('MID', 'Mid Lane'), ('JUNGLE', 'Jungle'), ('EXP', 'Exp Lane'), ('ROAM', 'Roam')], db_index=True, max_length=10)),
                ('is_starter', models.BooleanField(default=True, help_text='Indicates if the player was a starter in the game')),
                ('is_MVP', models.BooleanField(default=False, help_text='Indicates if the player was the MVP of the game')),
                ('hero', models.CharField(help_text='Hero played by the player', max_length=50)),
                ('k', models.PositiveIntegerField(default=0, help_text='Kills')),
                ('d', models.PositiveIntegerField(default=0, help_text='Deaths')),
                ('a', models.PositiveIntegerField(default=0, help_text='Assists')),
                ('gold', models.PositiveIntegerField(default=0, help_text='Total Gold Earned')),
                ('gpm', models.FloatField(default=0.0, help_text='Gold Per Minute')),
                ('dmg_dealt', models.PositiveIntegerField(default=0, help_text='Total Damage Dealt')),
                ('dmg_taken', models.PositiveIntegerField(default=0, help_text='Total Damage Taken')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='competitions.game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to='players.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_game_stats', to='teams.team')),
                ('team_stat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='competitions.teamgamestat')),
            ],
            options={
                'verbose_name': 'Player Game Stat',
                'verbose_name_plural': 'Player Game Stats',
                'ordering': ['game', 'team', 'role'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('region', models.CharField(choices=[('NA', 'North America'), ('ID', 'Indonesia'), ('MY', 'Malaysia'), ('PH', 'Philippines'), ('SG', 'Singapore'), ('BR', 'Brazil'), ('VN', 'Vietnam'), ('MM', 'Myanmar'), ('TH', 'Thailand'), ('IN', 'India'), ('TR', 'Turkey'), ('EU', 'Europe'), ('KR', 'Korea'), ('TW', 'Taiwan'), ('HK', 'Hong Kong'), ('JP', 'Japan'), ('CN', 'China'), ('MENA', 'Middle East and North Africa'), ('LATAM', 'Latin America'), ('INTL', 'International'), ('WORLD', 'World')], max_length=5)),
                ('tier', models.CharField(choices=[('S', 'S-tier'), ('A', 'A-tier'), ('B', 'B-tier'), ('C', 'C-tier'), ('D', 'D-tier')], db_index=True, max_length=2)),
                ('start_date', models.DateField(db_index=True)),
                ('end_date', models.DateField(db_index=True)),
                ('status', models.CharField(choices=[('UPCOMING', 'Upcoming'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed')], db_index=True, max_length=10)),
                ('prize_pool', models.PositiveIntegerField(blank=True, help_text='Prize pool in USD', null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='tournament_logos/')),
                ('description', models.TextField(blank=True)),
                ('rules', models.TextField(blank=True)),
                ('teams', models.ManyToManyField(blank=True, related_name='tournaments', to='teams.team')),
            ],
            options={
                'verbose_name': 'Tournament',
                'verbose_name_plural': 'Tournaments',
                'ordering': ['-start_date', 'name'],
            },
        ),
        migrations.AddField(
            model_name='stage',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='competitions.tournament'),
        ),
        migrations.CreateModel(
            name='GameDraftAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(choices=[('BAN', 'Ban'), ('PICK', 'Pick')], max_length=10)),
                ('side', models.CharField(choices=[('BLUE', 'Blue Side'), ('RED', 'Red Side')], max_length=5)),
                ('order', models.PositiveIntegerField(help_text='Order of the action in the draft, e.g., 1 for first action')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='draft_actions', to='competitions.game')),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='heroes.hero')),
                ('player', models.ForeignKey(blank=True, help_text='Set only for PICK actions; leave null for BAN actions', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='draft_actions', to='players.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='draft_actions', to='teams.team')),
            ],
            options={
                'verbose_name': 'Game Draft Action',
                'verbose_name_plural': 'Game Draft Actions',
                'ordering': ['game', 'order'],
                'indexes': [models.Index(fields=['game'], name='competition_game_id_9ba2e9_idx'), models.Index(fields=['team'], name='competition_team_id_571ce8_idx'), models.Index(fields=['side'], name='competition_side_2a26f8_idx'), models.Index(fields=['action'], name='competition_action_e467f4_idx'), models.Index(fields=['hero'], name='competition_hero_id_855368_idx'), models.Index(fields=['game', 'order'], name='competition_game_id_7fc5d2_idx')],
                'constraints': [models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('game', 'order'), name='unique_draft_action_order_per_game'), models.CheckConstraint(condition=models.Q(('action__in', ['BAN', 'PICK'])), name='valid_action_value'), models.CheckConstraint(condition=models.Q(('side__in', ['BLUE', 'RED'])), name='valid_side_value_draft')],
                'unique_together': {('game', 'order')},
            },
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['series'], name='competition_series__e34ac2_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['blue_side'], name='competition_blue_si_a6f754_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['red_side'], name='competition_red_sid_1b36d5_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['winner'], name='competition_winner__565661_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['game_no'], name='competition_game_no_c8af2c_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['series', 'game_no'], name='competition_series__a0074b_idx'),
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('series', 'game_no'), name='unique_game_number_per_series'),
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(condition=models.Q(('blue_side', models.F('red_side')), _negated=True), name='sides_must_be_different'),
        ),
        migrations.AlterUniqueTogether(
            name='game',
            unique_together={('series', 'game_no')},
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['stage'], name='competition_stage_i_14b3bc_idx'),
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['team1'], name='competition_team1_i_533524_idx'),
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['team2'], name='competition_team2_i_e57f9c_idx'),
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['winner'], name='competition_winner__6171d1_idx'),
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['scheduled_date'], name='competition_schedul_f8d8ab_idx'),
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['team1', 'team2'], name='competition_team1_i_f001f8_idx'),
        ),
        migrations.AddConstraint(
            model_name='series',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('stage', 'team1', 'team2'), name='unique_series_per_stage'),
        ),
        migrations.AddConstraint(
            model_name='series',
            constraint=models.CheckConstraint(condition=models.Q(('team1', models.F('team2')), _negated=True), name='teams_must_be_different'),
        ),
        migrations.AddConstraint(
            model_name='series',
            constraint=models.CheckConstraint(condition=models.Q(('best_of__in', [1, 3, 5, 7])), name='valid_best_of_value'),
        ),
        migrations.AddIndex(
            model_name='teamgamestat',
            index=models.Index(fields=['game'], name='competition_game_id_6e7c1f_idx'),
        ),
        migrations.AddIndex(
            model_name='teamgamestat',
            index=models.Index(fields=['team'], name='competition_team_id_490708_idx'),
        ),
        migrations.AddIndex(
            model_name='teamgamestat',
            index=models.Index(fields=['side'], name='competition_side_2862db_idx'),
        ),
        migrations.AddIndex(
            model_name='teamgamestat',
            index=models.Index(fields=['game', 'team'], name='competition_game_id_80ae9b_idx'),
        ),
        migrations.AddConstraint(
            model_name='teamgamestat',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('game', 'team'), name='unique_team_stat_per_game'),
        ),
        migrations.AlterUniqueTogether(
            name='teamgamestat',
            unique_together={('game', 'team')},
        ),
        migrations.AddIndex(
            model_name='playergamestat',
            index=models.Index(fields=['game'], name='competition_game_id_5d66e3_idx'),
        ),
        migrations.AddIndex(
            model_name='playergamestat',
            index=models.Index(fields=['player'], name='competition_player__3c9501_idx'),
        ),
        migrations.AddIndex(
            model_name='playergamestat',
            index=models.Index(fields=['team'], name='competition_team_id_93492a_idx'),
        ),
        migrations.AddIndex(
            model_name='playergamestat',
            index=models.Index(fields=['role'], name='competition_role_d1f7e8_idx'),
        ),
        migrations.AddIndex(
            model_name='playergamestat',
            index=models.Index(fields=['game', 'player'], name='competition_game_id_9104c0_idx'),
        ),
        migrations.AddIndex(
            model_name='playergamestat',
            index=models.Index(fields=['team', 'role'], name='competition_team_id_1e132a_idx'),
        ),
        migrations.AddConstraint(
            model_name='playergamestat',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('game', 'player'), name='unique_player_stat_per_game'),
        ),
        migrations.AddConstraint(
            model_name='playergamestat',
            constraint=models.CheckConstraint(condition=models.Q(('role__in', ['GOLD', 'MID', 'JUNGLE', 'EXP', 'ROAM'])), name='valid_role_value'),
        ),
        migrations.AlterUniqueTogether(
            name='playergamestat',
            unique_together={('game', 'player')},
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['region'], name='competition_region_8cb565_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['tier'], name='competition_tier_f90547_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['status'], name='competition_status_b1e4c8_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['start_date'], name='competition_start_d_4b1c3f_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['end_date'], name='competition_end_dat_8cd8c3_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['region', 'status'], name='competition_region_f6992a_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['tier', 'status'], name='competition_tier_b741fa_idx'),
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.CheckConstraint(condition=models.Q(('slug', ''), _negated=True), name='tournament_slug_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('name', 'start_date'), name='unique_tournament_name_start_date'),
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.CheckConstraint(condition=models.Q(('end_date__gte', models.F('start_date'))), name='end_date_after_start_date'),
        ),
        migrations.AddIndex(
            model_name='stage',
            index=models.Index(fields=['tournament', 'order'], name='competition_tournam_4ec9ab_idx'),
        ),
        migrations.AddIndex(
            model_name='stage',
            index=models.Index(fields=['start_date'], name='competition_start_d_623f09_idx'),
        ),
        migrations.AddIndex(
            model_name='stage',
            index=models.Index(fields=['end_date'], name='competition_end_dat_be79dd_idx'),
        ),
        migrations.AddConstraint(
            model_name='stage',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('tournament', 'name'), name='unique_stage_name_per_tournament'),
        ),
        migrations.AddConstraint(
            model_name='stage',
            constraint=models.CheckConstraint(condition=models.Q(('end_date__gte', models.F('start_date'))), name='stage_end_date_after_start_date'),
        ),
    ]
