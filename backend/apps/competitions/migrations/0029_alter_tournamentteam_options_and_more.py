# Generated by Django 5.2.7 on 2025-10-25 09:18

import django.db.models.constraints
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('competitions', '0028_remove_tournament_competition_start_d_4b1c3f_idx_and_more'),
        ('teams', '0006_remove_team_team_slug_not_empty_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='tournamentteam',
            options={'ordering': ['seed', 'team__short_name'], 'verbose_name': 'Tournament Team', 'verbose_name_plural': 'Tournament Teams'},
        ),
        migrations.RemoveConstraint(
            model_name='tournamentteam',
            name='unique_tournament_team',
        ),
        migrations.RemoveField(
            model_name='tournament',
            name='tournament_rules_link',
        ),
        migrations.AddField(
            model_name='tournament',
            name='rules_link',
            field=models.URLField(blank=True, help_text='External link to official tournament rules / competitive rulebook.'),
        ),
        migrations.AlterField(
            model_name='series',
            name='best_of',
            field=models.PositiveIntegerField(blank=True, choices=[(1, 'Bo1'), (3, 'Bo3'), (5, 'Bo5'), (7, 'Bo7')], default=3, help_text='Length of the series (Bo3, Bo5...).', null=True),
        ),
        migrations.AlterField(
            model_name='series',
            name='scheduled_date',
            field=models.DateTimeField(db_index=True, help_text='Planned start (local time). Used for overdue data reminders.'),
        ),
        migrations.AlterField(
            model_name='series',
            name='score',
            field=models.CharField(blank=True, help_text="Score in format 'Team1Score-Team2Score', e.g. '2-1'.", max_length=20),
        ),
        migrations.AlterField(
            model_name='series',
            name='winner',
            field=models.ForeignKey(blank=True, help_text='Auto-filled based on score calculation.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='series_won', to='teams.team'),
        ),
        migrations.AlterField(
            model_name='stage',
            name='end_date',
            field=models.DateField(db_index=True, help_text='When this stage ends.'),
        ),
        migrations.AlterField(
            model_name='stage',
            name='order',
            field=models.PositiveIntegerField(help_text='Order of the stage in the tournament (1 = earliest).'),
        ),
        migrations.AlterField(
            model_name='stage',
            name='slug',
            field=models.SlugField(blank=True, help_text='Auto-generated identifier for URLs / linking.', unique=True),
        ),
        migrations.AlterField(
            model_name='stage',
            name='start_date',
            field=models.DateField(db_index=True, help_text='When this stage starts.'),
        ),
        migrations.AlterField(
            model_name='stage',
            name='status',
            field=models.CharField(choices=[('UPCOMING', 'Upcoming'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed')], db_index=True, help_text='Auto-computed (Upcoming / Ongoing / Completed).', max_length=10),
        ),
        migrations.AlterField(
            model_name='stage',
            name='tier',
            field=models.CharField(choices=[('1', 'Tier 1'), ('2', 'Tier 2'), ('3', 'Tier 3'), ('4', 'Tier 4'), ('5', 'Tier 5')], db_index=True, help_text='Tier weight for ranking calc (1 = highest).', max_length=2),
        ),
        migrations.AlterField(
            model_name='stage',
            name='variant',
            field=models.CharField(blank=True, help_text="Variant of the stage, e.g. 'Upper Bracket', 'Double Elimination'.", max_length=50),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='description',
            field=models.TextField(blank=True, help_text='Public-facing description / summary for the tournament page.'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='prize_pool',
            field=models.PositiveIntegerField(blank=True, help_text='Prize pool in USD.', null=True),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='region',
            field=models.CharField(choices=[('NA', 'North America'), ('ID', 'Indonesia'), ('MY', 'Malaysia'), ('PH', 'Philippines'), ('SG', 'Singapore'), ('BR', 'Brazil'), ('VN', 'Vietnam'), ('MM', 'Myanmar'), ('TH', 'Thailand'), ('IN', 'India'), ('TR', 'Turkey'), ('EU', 'Europe'), ('KR', 'Korea'), ('TW', 'Taiwan'), ('HK', 'Hong Kong'), ('JP', 'Japan'), ('CN', 'China'), ('MENA', 'Middle East and North Africa'), ('LATAM', 'Latin America'), ('INT', 'International')], db_index=True, help_text='Primary region or league this tournament belongs to (e.g. PH, ID, INTL).', max_length=8),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='status',
            field=models.CharField(choices=[('UPCOMING', 'Upcoming'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed')], db_index=True, max_length=16),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='teams',
            field=models.ManyToManyField(blank=True, help_text='Teams participating in this tournament.', related_name='tournaments', through='competitions.TournamentTeam', to='teams.team'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='tier',
            field=models.CharField(choices=[('S', 'S-tier'), ('A', 'A-tier'), ('B', 'B-tier'), ('C', 'C-tier'), ('D', 'D-tier')], db_index=True, help_text='S-tier (world), A-tier (continental), B-tier (franchise league), etc.', max_length=1),
        ),
        migrations.AlterField(
            model_name='tournamentteam',
            name='group',
            field=models.CharField(blank=True, help_text="Group/Pool name, e.g. 'Group A'.", max_length=16),
        ),
        migrations.AlterField(
            model_name='tournamentteam',
            name='kind',
            field=models.CharField(blank=True, choices=[('INVITED', 'Invited'), ('QUALIFIED', 'Qualified'), ('FRANCHISE', 'Franchise')], help_text='How this team qualified (Invited / Qualified / Franchise).', max_length=12),
        ),
        migrations.AlterField(
            model_name='tournamentteam',
            name='notes',
            field=models.CharField(blank=True, help_text='Optional notes (sub roster, relegated, etc.).', max_length=255),
        ),
        migrations.AlterField(
            model_name='tournamentteam',
            name='seed',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Seed / placement coming into the event (1 = top seed).', null=True),
        ),
        migrations.AddIndex(
            model_name='tournamentteam',
            index=models.Index(fields=['tournament', 'team'], name='competition_tournam_0bc117_idx'),
        ),
        migrations.AddIndex(
            model_name='tournamentteam',
            index=models.Index(fields=['group'], name='competition_group_4c6d30_idx'),
        ),
        migrations.AddConstraint(
            model_name='tournamentteam',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('tournament', 'team'), name='unique_tournament_team'),
        ),
    ]
